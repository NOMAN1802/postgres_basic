
/*
             @Procedural Approach:
1. Language Support: Supports procedural languages like PL/pgSQL, PL/Perl, PL/Python, etc.
2. Complex Logic: Allows for complex logic using control structures like loops, conditionals, and exception handling.
3. Variable Support: Supports variable declarations and manipulation within the procedural code.
4. Stored Procedures/Functions: Provides the ability to create stored procedures or functions.

            @Non-Procedural Approach:
1. Declarative Queries: Focuses on writing declarative SQL queries to retrieve, insert, update, or delete data from the database.
2. Simplicity: Emphasises simplicity by expressing operations in terms of what data is needed.
3. SQL Functions: Supports SQL functions, which are single SQL statements that return a value or set of values.
4. Performance: Can sometimes offer better performance for simple operations due to the optimized query execution plans generated by the database engine.


*/

select * from employees;

--Function to get total number of employees
create Function emp_count()
RETURNS INT 
LANGUAGE SQL
AS 
$$
  SELECT COUNT(*) FROM employees;
$$;

--Calling the function
SELECT emp_count() AS total_employees;


CREATE OR REPLACE Function delete_employee()
RETURNS void
LANGUAGE SQL
AS 
$$
  DELETE FROM employees where employee_id = 30;
$$;

--Calling the function
SELECT delete_employee();


-- Using parameters in functions
CREATE OR REPLACE Function get_employees_by_department(dept_name VARCHAR)
RETURNS TABLE(employee_id INT, employee_name VARCHAR, department_name VARCHAR, salary DECIMAL, hire_date DATE)
LANGUAGE SQL
AS 
$$
  SELECT employee_id, employee_name, department_name, salary, hire_date
  FROM employees
  WHERE department_name = dept_name;
$$; 

--Calling the function with parameter
SELECT * FROM get_employees_by_department('IT');

--Creating a stored procedure to remove an employee
CREATE PROCEDURE remove_emp()
LANGUAGE plpgsql
AS
$$
BEGIN
   DELETE FROM employees WHERE employee_id = 29;
END;
$$;

--Calling the procedure
CALL remove_emp();

--Creating a stored procedure to remove an employee with variable
CREATE PROCEDURE remove_emp_var()
LANGUAGE plpgsql
AS
$$
DECLARE
test_var INT; 
BEGIN
   SELECT employee_id INTO test_var FROM employees WHERE employee_id = 28;
   DELETE FROM employees WHERE employee_id = test_var;
END;
$$;

--Calling the procedure
CALL remove_emp_var();



--Creating a stored procedure to remove an employee with variable with parameter
CREATE PROCEDURE remove_emp_by_id(p_emp_id INT)
LANGUAGE plpgsql
AS
$$
DECLARE
test_var INT; 
BEGIN
   SELECT employee_id INTO test_var FROM employees WHERE employee_id = p_emp_id;
   DELETE FROM employees WHERE employee_id = test_var;
   RAISE NOTICE 'Employee with ID % has been removed.', test_var;
END;
$$;

--Calling the procedure with parameter
CALL remove_emp_by_id(27);
